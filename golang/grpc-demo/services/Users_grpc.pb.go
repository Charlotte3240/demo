// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	QueryUserScore(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (*UserScoreResponse, error)
	QueryUserScoreByServerStream(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (UserService_QueryUserScoreByServerStreamClient, error)
	QueryUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserService_QueryUserScoreByClientStreamClient, error)
	QueryUserScoreByTWS(ctx context.Context, opts ...grpc.CallOption) (UserService_QueryUserScoreByTWSClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) QueryUserScore(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (*UserScoreResponse, error) {
	out := new(UserScoreResponse)
	err := c.cc.Invoke(ctx, "/services.UserService/QueryUserScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUserScoreByServerStream(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (UserService_QueryUserScoreByServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/services.UserService/QueryUserScoreByServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceQueryUserScoreByServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_QueryUserScoreByServerStreamClient interface {
	Recv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userServiceQueryUserScoreByServerStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceQueryUserScoreByServerStreamClient) Recv() (*UserScoreResponse, error) {
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) QueryUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserService_QueryUserScoreByClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/services.UserService/QueryUserScoreByClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceQueryUserScoreByClientStreamClient{stream}
	return x, nil
}

type UserService_QueryUserScoreByClientStreamClient interface {
	Send(*UserScoreRequest) error
	CloseAndRecv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userServiceQueryUserScoreByClientStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceQueryUserScoreByClientStreamClient) Send(m *UserScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceQueryUserScoreByClientStreamClient) CloseAndRecv() (*UserScoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) QueryUserScoreByTWS(ctx context.Context, opts ...grpc.CallOption) (UserService_QueryUserScoreByTWSClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/services.UserService/QueryUserScoreByTWS", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceQueryUserScoreByTWSClient{stream}
	return x, nil
}

type UserService_QueryUserScoreByTWSClient interface {
	Send(*UserScoreRequest) error
	Recv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userServiceQueryUserScoreByTWSClient struct {
	grpc.ClientStream
}

func (x *userServiceQueryUserScoreByTWSClient) Send(m *UserScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceQueryUserScoreByTWSClient) Recv() (*UserScoreResponse, error) {
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	QueryUserScore(context.Context, *UserScoreRequest) (*UserScoreResponse, error)
	QueryUserScoreByServerStream(*UserScoreRequest, UserService_QueryUserScoreByServerStreamServer) error
	QueryUserScoreByClientStream(UserService_QueryUserScoreByClientStreamServer) error
	QueryUserScoreByTWS(UserService_QueryUserScoreByTWSServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) QueryUserScore(context.Context, *UserScoreRequest) (*UserScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserScore not implemented")
}
func (UnimplementedUserServiceServer) QueryUserScoreByServerStream(*UserScoreRequest, UserService_QueryUserScoreByServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryUserScoreByServerStream not implemented")
}
func (UnimplementedUserServiceServer) QueryUserScoreByClientStream(UserService_QueryUserScoreByClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryUserScoreByClientStream not implemented")
}
func (UnimplementedUserServiceServer) QueryUserScoreByTWS(UserService_QueryUserScoreByTWSServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryUserScoreByTWS not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_QueryUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/QueryUserScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserScore(ctx, req.(*UserScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUserScoreByServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).QueryUserScoreByServerStream(m, &userServiceQueryUserScoreByServerStreamServer{stream})
}

type UserService_QueryUserScoreByServerStreamServer interface {
	Send(*UserScoreResponse) error
	grpc.ServerStream
}

type userServiceQueryUserScoreByServerStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceQueryUserScoreByServerStreamServer) Send(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_QueryUserScoreByClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).QueryUserScoreByClientStream(&userServiceQueryUserScoreByClientStreamServer{stream})
}

type UserService_QueryUserScoreByClientStreamServer interface {
	SendAndClose(*UserScoreResponse) error
	Recv() (*UserScoreRequest, error)
	grpc.ServerStream
}

type userServiceQueryUserScoreByClientStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceQueryUserScoreByClientStreamServer) SendAndClose(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceQueryUserScoreByClientStreamServer) Recv() (*UserScoreRequest, error) {
	m := new(UserScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_QueryUserScoreByTWS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).QueryUserScoreByTWS(&userServiceQueryUserScoreByTWSServer{stream})
}

type UserService_QueryUserScoreByTWSServer interface {
	Send(*UserScoreResponse) error
	Recv() (*UserScoreRequest, error)
	grpc.ServerStream
}

type userServiceQueryUserScoreByTWSServer struct {
	grpc.ServerStream
}

func (x *userServiceQueryUserScoreByTWSServer) Send(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceQueryUserScoreByTWSServer) Recv() (*UserScoreRequest, error) {
	m := new(UserScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserScore",
			Handler:    _UserService_QueryUserScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryUserScoreByServerStream",
			Handler:       _UserService_QueryUserScoreByServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryUserScoreByClientStream",
			Handler:       _UserService_QueryUserScoreByClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryUserScoreByTWS",
			Handler:       _UserService_QueryUserScoreByTWS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Users.proto",
}
